// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package script

import (
	"context"
	"fmt"
)

type ScriptRequest struct {
	Url         string `thrift:"url,1,required" frugal:"1,required,string" json:"url"`
	Key         string `thrift:"key,2,required" frugal:"2,required,string" json:"key"`
	CheckUpdate string `thrift:"checkUpdate,3" frugal:"3,default,string" json:"checkUpdate"`
}

func NewScriptRequest() *ScriptRequest {
	return &ScriptRequest{}
}

func (p *ScriptRequest) InitDefault() {
}

func (p *ScriptRequest) GetUrl() (v string) {
	return p.Url
}

func (p *ScriptRequest) GetKey() (v string) {
	return p.Key
}

func (p *ScriptRequest) GetCheckUpdate() (v string) {
	return p.CheckUpdate
}
func (p *ScriptRequest) SetUrl(val string) {
	p.Url = val
}
func (p *ScriptRequest) SetKey(val string) {
	p.Key = val
}
func (p *ScriptRequest) SetCheckUpdate(val string) {
	p.CheckUpdate = val
}

func (p *ScriptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScriptRequest(%+v)", *p)
}

var fieldIDToName_ScriptRequest = map[int16]string{
	1: "url",
	2: "key",
	3: "checkUpdate",
}

type ScriptResponse struct {
	Success bool   `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Content string `thrift:"content,2" frugal:"2,default,string" json:"content"`
	Res     *Res   `thrift:"res,3" frugal:"3,default,Res" json:"res"`
}

func NewScriptResponse() *ScriptResponse {
	return &ScriptResponse{}
}

func (p *ScriptResponse) InitDefault() {
}

func (p *ScriptResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *ScriptResponse) GetContent() (v string) {
	return p.Content
}

var ScriptResponse_Res_DEFAULT *Res

func (p *ScriptResponse) GetRes() (v *Res) {
	if !p.IsSetRes() {
		return ScriptResponse_Res_DEFAULT
	}
	return p.Res
}
func (p *ScriptResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *ScriptResponse) SetContent(val string) {
	p.Content = val
}
func (p *ScriptResponse) SetRes(val *Res) {
	p.Res = val
}

func (p *ScriptResponse) IsSetRes() bool {
	return p.Res != nil
}

func (p *ScriptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScriptResponse(%+v)", *p)
}

var fieldIDToName_ScriptResponse = map[int16]string{
	1: "success",
	2: "content",
	3: "res",
}

type Res struct {
	Code    int16             `thrift:"code,1" frugal:"1,default,i16" json:"code"`
	Msg     string            `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
	Data    map[string]string `thrift:"data,3" frugal:"3,default,map<string:string>" json:"data"`
	Content string            `thrift:"content,4" frugal:"4,default,string" json:"content"`
}

func NewRes() *Res {
	return &Res{}
}

func (p *Res) InitDefault() {
}

func (p *Res) GetCode() (v int16) {
	return p.Code
}

func (p *Res) GetMsg() (v string) {
	return p.Msg
}

func (p *Res) GetData() (v map[string]string) {
	return p.Data
}

func (p *Res) GetContent() (v string) {
	return p.Content
}
func (p *Res) SetCode(val int16) {
	p.Code = val
}
func (p *Res) SetMsg(val string) {
	p.Msg = val
}
func (p *Res) SetData(val map[string]string) {
	p.Data = val
}
func (p *Res) SetContent(val string) {
	p.Content = val
}

func (p *Res) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Res(%+v)", *p)
}

var fieldIDToName_Res = map[int16]string{
	1: "code",
	2: "msg",
	3: "data",
	4: "content",
}

type ScriptService interface {
	Script(ctx context.Context, req *ScriptRequest) (r *ScriptResponse, err error)
}

type ScriptServiceScriptArgs struct {
	Req *ScriptRequest `thrift:"req,1" frugal:"1,default,ScriptRequest" json:"req"`
}

func NewScriptServiceScriptArgs() *ScriptServiceScriptArgs {
	return &ScriptServiceScriptArgs{}
}

func (p *ScriptServiceScriptArgs) InitDefault() {
}

var ScriptServiceScriptArgs_Req_DEFAULT *ScriptRequest

func (p *ScriptServiceScriptArgs) GetReq() (v *ScriptRequest) {
	if !p.IsSetReq() {
		return ScriptServiceScriptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScriptServiceScriptArgs) SetReq(val *ScriptRequest) {
	p.Req = val
}

func (p *ScriptServiceScriptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScriptServiceScriptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScriptServiceScriptArgs(%+v)", *p)
}

var fieldIDToName_ScriptServiceScriptArgs = map[int16]string{
	1: "req",
}

type ScriptServiceScriptResult struct {
	Success *ScriptResponse `thrift:"success,0,optional" frugal:"0,optional,ScriptResponse" json:"success,omitempty"`
}

func NewScriptServiceScriptResult() *ScriptServiceScriptResult {
	return &ScriptServiceScriptResult{}
}

func (p *ScriptServiceScriptResult) InitDefault() {
}

var ScriptServiceScriptResult_Success_DEFAULT *ScriptResponse

func (p *ScriptServiceScriptResult) GetSuccess() (v *ScriptResponse) {
	if !p.IsSetSuccess() {
		return ScriptServiceScriptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScriptServiceScriptResult) SetSuccess(x interface{}) {
	p.Success = x.(*ScriptResponse)
}

func (p *ScriptServiceScriptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScriptServiceScriptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScriptServiceScriptResult(%+v)", *p)
}

var fieldIDToName_ScriptServiceScriptResult = map[int16]string{
	0: "success",
}
