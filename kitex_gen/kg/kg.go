// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package kg

import (
	"context"
	"fmt"
)

type KgRequest struct {
	SongId  string `thrift:"songId,1,required" frugal:"1,required,string" json:"songId"`
	Quality string `thrift:"quality,2,required" frugal:"2,required,string" json:"quality"`
}

func NewKgRequest() *KgRequest {
	return &KgRequest{}
}

func (p *KgRequest) InitDefault() {
}

func (p *KgRequest) GetSongId() (v string) {
	return p.SongId
}

func (p *KgRequest) GetQuality() (v string) {
	return p.Quality
}
func (p *KgRequest) SetSongId(val string) {
	p.SongId = val
}
func (p *KgRequest) SetQuality(val string) {
	p.Quality = val
}

func (p *KgRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KgRequest(%+v)", *p)
}

var fieldIDToName_KgRequest = map[int16]string{
	1: "songId",
	2: "quality",
}

type KgResponse struct {
	Code  int16  `thrift:"code,1,required" frugal:"1,required,i16" json:"code"`
	Msg   string `thrift:"msg,2,required" frugal:"2,required,string" json:"msg"`
	Data  string `thrift:"data,3" frugal:"3,default,string" json:"data"`
	Extra *Extra `thrift:"extra,4" frugal:"4,default,Extra" json:"extra"`
}

func NewKgResponse() *KgResponse {
	return &KgResponse{}
}

func (p *KgResponse) InitDefault() {
}

func (p *KgResponse) GetCode() (v int16) {
	return p.Code
}

func (p *KgResponse) GetMsg() (v string) {
	return p.Msg
}

func (p *KgResponse) GetData() (v string) {
	return p.Data
}

var KgResponse_Extra_DEFAULT *Extra

func (p *KgResponse) GetExtra() (v *Extra) {
	if !p.IsSetExtra() {
		return KgResponse_Extra_DEFAULT
	}
	return p.Extra
}
func (p *KgResponse) SetCode(val int16) {
	p.Code = val
}
func (p *KgResponse) SetMsg(val string) {
	p.Msg = val
}
func (p *KgResponse) SetData(val string) {
	p.Data = val
}
func (p *KgResponse) SetExtra(val *Extra) {
	p.Extra = val
}

func (p *KgResponse) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *KgResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KgResponse(%+v)", *p)
}

var fieldIDToName_KgResponse = map[int16]string{
	1: "code",
	2: "msg",
	3: "data",
	4: "extra",
}

type Extra struct {
	Cache   bool     `thrift:"cache,1,required" frugal:"1,required,bool" json:"cache"`
	Quality *Quality `thrift:"quality,2,required" frugal:"2,required,Quality" json:"quality"`
	Expire  *Expire  `thrift:"expire,3,required" frugal:"3,required,Expire" json:"expire"`
}

func NewExtra() *Extra {
	return &Extra{}
}

func (p *Extra) InitDefault() {
}

func (p *Extra) GetCache() (v bool) {
	return p.Cache
}

var Extra_Quality_DEFAULT *Quality

func (p *Extra) GetQuality() (v *Quality) {
	if !p.IsSetQuality() {
		return Extra_Quality_DEFAULT
	}
	return p.Quality
}

var Extra_Expire_DEFAULT *Expire

func (p *Extra) GetExpire() (v *Expire) {
	if !p.IsSetExpire() {
		return Extra_Expire_DEFAULT
	}
	return p.Expire
}
func (p *Extra) SetCache(val bool) {
	p.Cache = val
}
func (p *Extra) SetQuality(val *Quality) {
	p.Quality = val
}
func (p *Extra) SetExpire(val *Expire) {
	p.Expire = val
}

func (p *Extra) IsSetQuality() bool {
	return p.Quality != nil
}

func (p *Extra) IsSetExpire() bool {
	return p.Expire != nil
}

func (p *Extra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Extra(%+v)", *p)
}

var fieldIDToName_Extra = map[int16]string{
	1: "cache",
	2: "quality",
	3: "expire",
}

type Quality struct {
	Target  string `thrift:"target,1,required" frugal:"1,required,string" json:"target"`
	Result_ string `thrift:"result,2,required" frugal:"2,required,string" json:"result"`
}

func NewQuality() *Quality {
	return &Quality{}
}

func (p *Quality) InitDefault() {
}

func (p *Quality) GetTarget() (v string) {
	return p.Target
}

func (p *Quality) GetResult_() (v string) {
	return p.Result_
}
func (p *Quality) SetTarget(val string) {
	p.Target = val
}
func (p *Quality) SetResult_(val string) {
	p.Result_ = val
}

func (p *Quality) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Quality(%+v)", *p)
}

var fieldIDToName_Quality = map[int16]string{
	1: "target",
	2: "result",
}

type Expire struct {
	Time      int64 `thrift:"time,1,required" frugal:"1,required,i64" json:"time"`
	CanExpire bool  `thrift:"canExpire,2,required" frugal:"2,required,bool" json:"canExpire"`
}

func NewExpire() *Expire {
	return &Expire{}
}

func (p *Expire) InitDefault() {
}

func (p *Expire) GetTime() (v int64) {
	return p.Time
}

func (p *Expire) GetCanExpire() (v bool) {
	return p.CanExpire
}
func (p *Expire) SetTime(val int64) {
	p.Time = val
}
func (p *Expire) SetCanExpire(val bool) {
	p.CanExpire = val
}

func (p *Expire) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Expire(%+v)", *p)
}

var fieldIDToName_Expire = map[int16]string{
	1: "time",
	2: "canExpire",
}

type KgService interface {
	KgMusicUrl(ctx context.Context, req *KgRequest) (r *KgResponse, err error)
}

type KgServiceKgMusicUrlArgs struct {
	Req *KgRequest `thrift:"req,1" frugal:"1,default,KgRequest" json:"req"`
}

func NewKgServiceKgMusicUrlArgs() *KgServiceKgMusicUrlArgs {
	return &KgServiceKgMusicUrlArgs{}
}

func (p *KgServiceKgMusicUrlArgs) InitDefault() {
}

var KgServiceKgMusicUrlArgs_Req_DEFAULT *KgRequest

func (p *KgServiceKgMusicUrlArgs) GetReq() (v *KgRequest) {
	if !p.IsSetReq() {
		return KgServiceKgMusicUrlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *KgServiceKgMusicUrlArgs) SetReq(val *KgRequest) {
	p.Req = val
}

func (p *KgServiceKgMusicUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *KgServiceKgMusicUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KgServiceKgMusicUrlArgs(%+v)", *p)
}

var fieldIDToName_KgServiceKgMusicUrlArgs = map[int16]string{
	1: "req",
}

type KgServiceKgMusicUrlResult struct {
	Success *KgResponse `thrift:"success,0,optional" frugal:"0,optional,KgResponse" json:"success,omitempty"`
}

func NewKgServiceKgMusicUrlResult() *KgServiceKgMusicUrlResult {
	return &KgServiceKgMusicUrlResult{}
}

func (p *KgServiceKgMusicUrlResult) InitDefault() {
}

var KgServiceKgMusicUrlResult_Success_DEFAULT *KgResponse

func (p *KgServiceKgMusicUrlResult) GetSuccess() (v *KgResponse) {
	if !p.IsSetSuccess() {
		return KgServiceKgMusicUrlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *KgServiceKgMusicUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*KgResponse)
}

func (p *KgServiceKgMusicUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KgServiceKgMusicUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KgServiceKgMusicUrlResult(%+v)", *p)
}

var fieldIDToName_KgServiceKgMusicUrlResult = map[int16]string{
	0: "success",
}
