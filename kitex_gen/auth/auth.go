// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package auth

import (
	"context"
	"fmt"
)

type AuthRequest struct {
	AuthKey string `thrift:"authKey,1,required" frugal:"1,required,string" json:"authKey"`
}

func NewAuthRequest() *AuthRequest {
	return &AuthRequest{}
}

func (p *AuthRequest) InitDefault() {
}

func (p *AuthRequest) GetAuthKey() (v string) {
	return p.AuthKey
}
func (p *AuthRequest) SetAuthKey(val string) {
	p.AuthKey = val
}

func (p *AuthRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthRequest(%+v)", *p)
}

var fieldIDToName_AuthRequest = map[int16]string{
	1: "authKey",
}

type AuthResponse struct {
	Success bool              `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Res     map[string]string `thrift:"res,2,required" frugal:"2,required,map<string:string>" json:"res"`
}

func NewAuthResponse() *AuthResponse {
	return &AuthResponse{}
}

func (p *AuthResponse) InitDefault() {
}

func (p *AuthResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *AuthResponse) GetRes() (v map[string]string) {
	return p.Res
}
func (p *AuthResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *AuthResponse) SetRes(val map[string]string) {
	p.Res = val
}

func (p *AuthResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthResponse(%+v)", *p)
}

var fieldIDToName_AuthResponse = map[int16]string{
	1: "success",
	2: "res",
}

type AuthService interface {
	Auth(ctx context.Context, req *AuthRequest) (r *AuthResponse, err error)
}

type AuthServiceAuthArgs struct {
	Req *AuthRequest `thrift:"req,1" frugal:"1,default,AuthRequest" json:"req"`
}

func NewAuthServiceAuthArgs() *AuthServiceAuthArgs {
	return &AuthServiceAuthArgs{}
}

func (p *AuthServiceAuthArgs) InitDefault() {
}

var AuthServiceAuthArgs_Req_DEFAULT *AuthRequest

func (p *AuthServiceAuthArgs) GetReq() (v *AuthRequest) {
	if !p.IsSetReq() {
		return AuthServiceAuthArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthServiceAuthArgs) SetReq(val *AuthRequest) {
	p.Req = val
}

func (p *AuthServiceAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthServiceAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceAuthArgs(%+v)", *p)
}

var fieldIDToName_AuthServiceAuthArgs = map[int16]string{
	1: "req",
}

type AuthServiceAuthResult struct {
	Success *AuthResponse `thrift:"success,0,optional" frugal:"0,optional,AuthResponse" json:"success,omitempty"`
}

func NewAuthServiceAuthResult() *AuthServiceAuthResult {
	return &AuthServiceAuthResult{}
}

func (p *AuthServiceAuthResult) InitDefault() {
}

var AuthServiceAuthResult_Success_DEFAULT *AuthResponse

func (p *AuthServiceAuthResult) GetSuccess() (v *AuthResponse) {
	if !p.IsSetSuccess() {
		return AuthServiceAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthServiceAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*AuthResponse)
}

func (p *AuthServiceAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceAuthResult(%+v)", *p)
}

var fieldIDToName_AuthServiceAuthResult = map[int16]string{
	0: "success",
}
