// Code generated by Kitex v0.13.0. DO NOT EDIT.

package kgservice

import (
	"context"
	"errors"
	kg "github.com/ChangKaiChen/lx-music-api-server/kitex_gen/kg"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"KgMusicUrl": kitex.NewMethodInfo(
		kgMusicUrlHandler,
		newKgServiceKgMusicUrlArgs,
		newKgServiceKgMusicUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	kgServiceServiceInfo                = NewServiceInfo()
	kgServiceServiceInfoForClient       = NewServiceInfoForClient()
	kgServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return kgServiceServiceInfo
}

// for stream start
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return kgServiceServiceInfoForStreamClient
}

// for start
func serviceInfoForClient() *kitex.ServiceInfo {
	return kgServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "KgService"
	handlerType := (*kg.KgService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "kg",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.0",
		Extra:           extra,
	}
	return svcInfo
}

func kgMusicUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*kg.KgServiceKgMusicUrlArgs)
	realResult := result.(*kg.KgServiceKgMusicUrlResult)
	success, err := handler.(kg.KgService).KgMusicUrl(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newKgServiceKgMusicUrlArgs() interface{} {
	return kg.NewKgServiceKgMusicUrlArgs()
}

func newKgServiceKgMusicUrlResult() interface{} {
	return kg.NewKgServiceKgMusicUrlResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) KgMusicUrl(ctx context.Context, req *kg.KgRequest) (r *kg.KgResponse, err error) {
	var _args kg.KgServiceKgMusicUrlArgs
	_args.Req = req
	var _result kg.KgServiceKgMusicUrlResult
	if err = p.c.Call(ctx, "KgMusicUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
